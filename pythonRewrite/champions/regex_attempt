import re
from common.modelcommon import Effect


#If you come back to this remember to update effect so that all the elements in the list arent equal to eachother!


def val(champ1,champ2,abi):
    #Takes input primary champion object champ1, target champion object champ2, 
    #and identiying ability string abi
    
    #Translating regex matches to stats
    def translate(match):
       if re.match(r"AP",match):
           return champ1.stats.abilityPower
       elif re.match(r"AD",match):
           return champ1.stats.attackDamage
       
   #Investigating required size of effect list for predefinition
    e = getattr(champ1.abilities,abi)
    imax = len(e)
    jmax = 0
    kmax = 0
    for i in e:
        if len(i.effects) > jmax:
            jmax = len(i.effects)
            for j in i.effects:
                if len(j.leveling) > kmax:
                    kmax = len(j.leveling)
    effect = [Effect(jmax,kmax)]*imax
    
    #Defining regex patterns
    simple = re.compile(r"^%\s+|.*:Rscale|.*Soul|.*Mist|.*Siphon|.*Mark|.*Feast")
    rscale = re.compile(r":Rscale")
    priscale = re.compile(r"(AP|AD)")
    
    #Parsing units and calculating damage values
    for idx,i in enumerate(e):
        for jdx,j in enumerate(i.effects):
            for kdx,k in enumerate(j.leveling):
                effect[idx].att[(jdx+1)*(kdx+1)-1] = k.attribute
                eff = getattr(effect[idx],'value')[(jdx+1)*(kdx+1)-1]
                for l in k.modifiers:
                    if rscale.match(l.units[0]):
                        lvl = champ1.abilities.R[0].level-1
                    else:
                        lvl = e[0].level-1
                    if not simple.match(l.units[lvl]):
                        eff = eff + float(l.values[lvl])
                    elif priscale.match(simple.split(l.units[lvl])[1]):
                        eff = eff + float(l.values[lvl])*float(translate(
                            priscale.match(simple.split(l.units[lvl])[1]).group()))/100
                effect[idx].value[(jdx+1)*(kdx+1)-1] = eff
                
    #Removing extraneous elements of effect structure
    for idx, i in enumerate(effect):
            for jdx in range(len(i.att)):
                if not effect[idx].att[jdx]:
                    effect[idx].value[jdx] = 'None'         
    for idx,i in enumerate(effect):
        while 'None' in effect[idx].value:
            effect[idx].att.remove('')
            effect[idx].value.remove('None')
            
    return effect