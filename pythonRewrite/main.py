from champions import (champfix, modelchamp)from items import itemfix#Patching datachampfix.fix_champs()itemfix.fix_items()print('\n')#Running a sample set of operations#Creating a new champion objectchamp1 = modelchamp.Champ("Ahri")print(champ1.name+ " is level "+str(champ1.level)+" and has "+str(champ1.stats.health)+" health.")#Performing sample user inputs#Levelling up champion#Observe changes to champion's level, stat growth accordinglychamp1.level_change(7)print(champ1.name+ " is now level "+str(champ1.level)+" and has "+str(champ1.stats.health)+" health.")#Adding a ruby crystal to champion's inventorychamp1.item('1028',0)print(champ1.name+ " now has a "+champ1.inv[0].name+" and has "+str(champ1.stats.health)+" health.")#Creating an opponent champion for champ1champ2 = modelchamp.Champ("Lux")print(champ2.name+ " is level "+str(champ2.level)+" and has "+str(champ2.stats.health)+" health.")#Leveling champ1's Q ability and performing it on champ2champ1.abilities.Q[0].level = 3effect = modelchamp.val(champ1,champ2,'Q')print(champ1.name+"'s Q would deal "+str(effect[0].value[1])+' unmitigated damage.')print('Because of '+champ2.name+"'s resistances, it will instead deal "+"{:.2f}".format(effect[0].dealt[1])+" "+effect[0].att[1])#Adding sorcerer shoes to champ1's inventory, revaluating Qchamp1.item('3020',1)print(champ1.name+ " now has "+champ1.inv[1].name+" and has "+str(champ1.stats.magicPenetration)+" magic penetration.")effect = modelchamp.val(champ1,champ2,'Q')print(champ1.name+"'s "+champ1.inv[1].name+" should decrease the effectivenes of "+champ2.name+"'s mitigation.")print("Now, "+champ1.name+"'s Q will deal "+"{:.2f}".format(effect[0].dealt[1])+" "+effect[0].att[1])